(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{537:function(t,s,a){"use strict";a.r(s);var r=a(4),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"阳春三月"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阳春三月"}},[t._v("#")]),t._v(" 阳春三月")]),t._v(" "),a("h3",{attrs:{id:"_03-02"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-02"}},[t._v("#")]),t._v(" 03-02")]),t._v(" "),a("ul",[a("li",[t._v("fastjson转jackson\n由于涉及面较大，因此在开发时，首先切了一个分支，提供了一个新工具类，用于对外提供json转换功能。这边考虑要比对改造前后生成的结果是否正确，因此在开发时添加了一个\n监控方法对改造前后的API分别进行结果计算，比对结果。这样做的好处是，在开发时同一次运行可以分别看到新旧API处理的结果，并发现结果的异同。此外在监控中需要比对json\n的异同，这个如果自己写还是需要点时间，考虑全面的，遂找了些开源工具。")])]),t._v(" "),a("h3",{attrs:{id:"_03-09"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-09"}},[t._v("#")]),t._v(" 03-09")]),t._v(" "),a("p",[t._v("今天使用jmeter，发现下拉白屏，花屏，最后发现是外接显示器的缘故，怪不得外接显示器，右键刷新那么慢。暂没找到解决方法。")])])}),[],!1,null,null,null);s.default=e.exports}}]);