(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{494:function(s,a,t){s.exports=t.p+"assets/img/bytecode.e0a52858.jpg"},557:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"jvm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[s._v("#")]),s._v(" jvm")]),s._v(" "),n("h3",{attrs:{id:"一个简单的java字节码示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个简单的java字节码示例"}},[s._v("#")]),s._v(" 一个简单的java字节码示例")]),s._v(" "),n("h4",{attrs:{id:"java源代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java源代码"}},[s._v("#")]),s._v(" java源代码")]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloWorld")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloWorld")]),s._v(" helloWorld "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloWorld")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h4",{attrs:{id:"编译helloworld-java生成helloworld-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译helloworld-java生成helloworld-class"}},[s._v("#")]),s._v(" 编译HelloWorld.java生成HelloWorld.class")]),s._v(" "),n("p",[n("code",[s._v("javac HelloWorld.java")])]),s._v(" "),n("h4",{attrs:{id:"反汇编helloworld-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反汇编helloworld-class"}},[s._v("#")]),s._v(" 反汇编HelloWorld.class")]),s._v(" "),n("p",[n("code",[s._v("javap -c HelloWorld.class")]),s._v("通过-c命令查看反编译代码，如组成字节码的指令\n"),n("img",{attrs:{src:t(494),alt:""}}),s._v("\n字节码文件中包含了默认构造函数和main函数两块。默认构造函数调用了父类Object的构造函数。main函数中调用默认构造函数创建HelloWorld对象。")]),s._v(" "),n("h4",{attrs:{id:"循环字节码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#循环字节码"}},[s._v("#")]),s._v(" 循环字节码")]),s._v(" "),n("blockquote",[n("p",[s._v("int循环示例代码片段")])]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("spin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_0\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" istore_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_0\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" istore_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iload_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" bipush "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" if_icmpge "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iinc "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1,1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" goto "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解析\n"),n("ul",[n("li",[s._v("用了16个字节码")]),s._v(" "),n("li",[s._v("第1个字节码iconst_0(0x3)，将int常量0压到操作数栈上")]),s._v(" "),n("li",[s._v("第2个字节码istore_1(0x3c),将操作数栈的栈顶元素弹出，将其设置到局部变量表数组的第二个（索引1）位置处。")]),s._v(" "),n("li",[s._v("第1个和第2个字节码实际上完成的是"),n("code",[s._v("int i = 0;")])]),s._v(" "),n("li",[s._v("第3个第4个字节码完成的是for循环里的"),n("code",[s._v("i = 0")])]),s._v(" "),n("li",[s._v("第5个字节码iload_1(0x1b)将局部变量表里索引为1（第二个位置）处的值压倒操作数栈")]),s._v(" "),n("li",[s._v("第6个字节码bipush(0x10)将紧接着的字节符号扩展为int值，压入操作数栈")]),s._v(" "),n("li",[s._v("第7个字节表示操作数100")]),s._v(" "),n("li",[s._v("第8个字节比较弹出的100和栈顶i比较")]),s._v(" "),n("li",[s._v("第9，10个字节表示指令地址，在if_icmp"),n("cond",[s._v("条件指令后的2个字节表示有符号的16位数表示的偏移量，执行从比较指令地址处跳到偏移量处执行")])],1),s._v(" "),n("li",[s._v("第11个字节iinc表示如果第8个字节的比较条件不成立，那么增加索引为1处的局部变量表的值加上常量")]),s._v(" "),n("li",[s._v("第12个字节1位索引为1处的局部变量表的值")]),s._v(" "),n("li",[s._v("第13个字节1表示常量，其首先符号扩展为int")]),s._v(" "),n("li",[s._v("第14个字节 goto表示(0xa7)无条件分支跳转")]),s._v(" "),n("li",[s._v("第15(byte1),16(byte2)两个无符号字节构造(byte1 << 8 | byte2)一个有符号的16位偏移量。")]),s._v(" "),n("li",[s._v("第16个字节return从方法返回")])])])]),s._v(" "),n("blockquote",[n("p",[s._v("double循环示例代码片段")])]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("dspin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("其反汇编的字节码为，//后面的为解释或者是Javap生成的注释")]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2 = Double             100.0d")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dconst_0   //压入0.0\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dstore_1   //将0.0存储到局部变量表的1，2位置"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("double占2个位置，使用较小索引来访问"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dload_1    //将局部变量表1，2位置的值压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" ldc2_w  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2 // double 100.0d   //将常量池第二个字节开始的2个字节值，这边是100.0压入栈")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dcmpg      //比较从弹出的栈顶的2个元素 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" 和100.0d "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(".0d返回-1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" ifge "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("    //将上一步的栈顶的结果-1和0比较 如果-"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("走17，显然不成立，继续第10个字节码指令执行\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dload_1   //将局部变量表1位置的值0.0压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dconst_1  //将1.0压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dadd      //将栈顶的2个元素0.0, "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("弹出并相加。结果1.0d入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" dstore_1  //将栈顶元素1.0存储到局部变量表1位置\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" goto "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("    //转到第2条指令\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v("    //完成返回void\n")])])]),n("ul",[n("li",[s._v("ldc2_w指令\n"),n("ul",[n("li",[s._v("从运行时常量池压入操作数栈（宽索引）")]),s._v(" "),n("li",[s._v("格式 ldc2_w indexbyte1 indexbyte2")]),s._v(" "),n("li",[s._v("指令码(0x14)")]),s._v(" "),n("li",[s._v("描述\n"),n("ul",[n("li",[s._v("无符号的indexbyte1和indexbyte2装配成无符号的16位的索引指向当前类的运行时常量池\n索引值是(indexbyte1 << 8 | indexbyte2)计算出。索引必须是当前类运行池的合法索引。该索引\n对应的运行时常量池的条目必须是long或double类型的常量。对应的运行时常量值以long或double类型入栈。")])])]),s._v(" "),n("li",[s._v("注意\n只有ldc2_w指令的宽索引版本存在，不存在使用单字节索引压入long或double的ldc2指令。\nldc2_w指令只能用于压入double值集指定的double类型值，因为常量池中的double类型常量必须来自double值集")])])])]),s._v(" "),n("blockquote",[n("p",[s._v("short循环代码片段")])]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sspin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("对应的反汇编指令")]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_0\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" istore_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iload_1   //short被视为int\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" bipush "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" if_icmpge "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iload_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iadd\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" i2s    //这边是使用i2s指令将int截断为short。这是使用short,byte,char等类型时的额外开销  \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" istore_1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" goto "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v("\n")])])]),n("p",[s._v("从上面int循环示例和double循环示例，可以看出，jvm对数值类型int的支持比double要好，对int提供了iinc及if_icmpge，而在double中并没有提供类似的指令，"),n("br"),s._v("\ndouble的示例中通过两条以上的指令来实现这样的效果，这主要原因处于jvm使用单字节来紧凑表示字节码的原因，因此jvm指令对于数据类型类型并不是正交的，"),n("br"),s._v("\nint类型上的部分操作，在其他类型中并不存在，而对于short,char,byte等的运算操作更多的是转换为int类型的相关指令操作。jvm偏爱int的主要原因是期望操作"),n("br"),s._v("\n数栈和局部变量表的高效实现。也是由于int在大多数程序中使用频率更加高。")]),s._v(" "),n("p",[s._v("总的来说，jvm对int直接支持，对short,byte,char缺少直接支持(转换为int类型操作)，对long及浮点型的支持次于int,主要缺少根据比较操作数的结果直接转移的单条指令")]),s._v(" "),n("h4",{attrs:{id:"四则运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四则运算"}},[s._v("#")]),s._v(" 四则运算")]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align2grain")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" grain"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" grain "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("grain "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("反汇编指令")]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iload_1        // 从局部变量表1位置压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iload_2        // 从局部变量表2位置压入栈   \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iadd           // 弹出栈顶2个元素，相加结果压入栈 i + grain\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_1       // 将常量1压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" isub           // 弹出栈顶2个元素，相减结果压入栈，栈顶为 i + grain -1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iload_2        // 将局部变量表2位置压入栈 grain\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_1       // 将常量1压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" isub           // grain - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iconst_m1      // 将常量-1压入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" ixor           // 将栈顶2个元素弹出做异或运算，结果压入栈。基于~ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("grain -1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" -1 ^ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("grain - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，因此这边\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" iand          // 将栈顶2个元素（分别是 i + grain - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 和 ~ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("grain -1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）做按位与运算，结果入栈\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" ireturn       // 返回int\n")])])]),n("h3",{attrs:{id:"加载、连接、初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载、连接、初始化"}},[s._v("#")]),s._v(" 加载、连接、初始化")]),s._v(" "),n("h4",{attrs:{id:"加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[s._v("#")]),s._v(" 加载")]),s._v(" "),n("p",[s._v("根据指定名称查找类或接口的二进制表示，并从该二进制表示加载类或接口的过程。")]),s._v(" "),n("h4",{attrs:{id:"链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[s._v("#")]),s._v(" 链接")]),s._v(" "),n("p",[s._v("链接是将类或接口合并成jvm的运行时状态并执行的过程。")]),s._v(" "),n("h4",{attrs:{id:"初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),n("p",[s._v("类或接口的初始化由执行类或接口的初始化方法"),n("code",[s._v("<clinit>")]),s._v("构成。")]),s._v(" "),n("h2",{attrs:{id:"gc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[s._v("#")]),s._v(" gc")]),s._v(" "),n("ul",[n("li",[s._v("资料")])]),s._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://dzone.com/articles/understanding-the-java-memory-model-and-the-garbag",target:"_blank",rel:"noopener noreferrer"}},[s._v("Understanding the Java Memory Model and Garbage Collection"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("The Java ® Virtual Machine Specification Java SE 8 Edition")]),s._v(" "),n("li",[n("a",{attrs:{href:"https://dzone.com/articles/jvm-architecture-explained",target:"_blank",rel:"noopener noreferrer"}},[s._v("jvm-architecture-explained"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://dzone.com/articles/java-memory-management",target:"_blank",rel:"noopener noreferrer"}},[s._v("java-memory-management"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);